---
description: git commit, 代码提交, git message
globs: 
alwaysApply: false
---
# Conventional Commits 最佳实践

Conventional Commits 通过标准化提交消息格式，使其可被工具（如 `semantic-release`）解析，从而实现自动化版本管理和变更日志生成。精准的提交消息对清晰沟通和自动化流程至关重要。

---

## 结构

- **格式**：`<类型>(<范围>): <描述>`
  - **类型**：定义变更的意图（如 `feat`、`fix`）。
  - **范围**（可选）：指定受影响的领域（如 `auth`、`ui`）。
  - **描述**：简洁的、使用祈使语气的摘要（如“添加登录端点”）。
- **可选正文**：提供更多细节（在主题后换行）。
- **可选页脚**：元数据，如 `BREAKING CHANGE:` 或问题引用。

---

## 关键类型及其影响

这些类型遵循 `semantic-release` 默认规则（基于 Angular 规范）：

### **触发版本升级的类型**

- **`feat:`**  
  新功能 → **次版本号递增**（如 `1.2.3 → 1.3.0`）。  
  示例：`feat(ui): 添加暗色模式切换`

- **`fix:`**  2
  修复漏洞 → **补丁版本号递增**（如 `1.2.3 → 1.2.4`）。  
  示例：`fix(api): 修正速率限制错误`

- **`BREAKING CHANGE`**  
  兼容性破坏 → **主版本号递增**（如 `1.2.3 → 2.0.0`）。  
  标记方式：  
  - 在类型后加 `!`：`feat(auth)!: 切换到 OAuth2`  
  - 在页脚中说明：  
    ```
    feat: 更新支付网关  
    BREAKING CHANGE: 停止支持 PayPal v1
    ```

---

### **不触发版本升级的类型**

- **`docs:`**  
  文档更新。  
  示例：`docs: 解释缓存策略`

- **`style:`**  
  代码格式或风格调整（不影响功能）。  
  示例：`style: 强制使用 2 个空格缩进`

- **`refactor:`**  
  代码重构（无功能性变更）。  
  示例：`refactor(utils): 简化辅助函数`

- **`perf:`**  
  性能优化。  
  示例：`perf(db): 为用户查询添加索引`

- **`test:`**  
  测试用例的新增或修改。  
  示例：`test(auth): 覆盖边界情况`

- **`build:`**  
  构建系统或依赖项变更。  
  示例：`build: 升级到 Webpack 5`

- **`ci:`**  
  持续集成/持续交付（CI/CD）配置更新。  
  示例：`ci: 添加测试覆盖率报告`

- **`chore:`**  
  维护性任务（如代码规范更新）。  
  示例：`chore: 更新代码规范规则`

---

## 有效提交的指南

- **具体明确**：通过范围定位变更（如 `feat(auth): 添加 JWT 验证`，而非 `feat: 添加功能`）。  
- **保持简洁**：主题行控制在 50 字符内，细节放在正文。  
  示例：  
  ```
  fix(ui): 修复按钮重叠  
  调整 CSS 以避免小屏幕下的重叠问题。
  ```
- **有意触发版本**：仅用 `feat`、`fix` 或 `BREAKING CHANGE` 时才希望发布新版本。  
- **避免歧义**：使用祈使语气（如“添加端点”而非“添加了端点”）。  
- **文档重大更改**：显式标注重大更改以通知 `semantic-release` 和团队。

---

## 示例与场景

### **次版本号递增**  
```
feat(config): 添加环境变量解析  
支持通过 NODE_ENV 切换开发/生产环境配置。
```

### **补丁版本号递增**  
```
fix(db): 处理用户查询中的空值  
防止因用户数据不完整导致的崩溃。
```

### **主版本号递增**  
```
feat(api)!: 用 GraphQL 替换 REST  
BREAKING CHANGE: 移除所有 v1 REST 端点
```

### **不触发版本**  
```
chore(deps): 升级 ESLint 到 8.0.0  
无功能性变更，仅对齐团队规范。
```