---
description: 
globs: *.scss,*.vue
alwaysApply: false
---
# CSS 开发规范

## 1. 样式架构

### 1.1 技术栈
- 使用 SASS/SCSS 作为 CSS 预处理器
- 遵循 BEM 命名规范

### 1.2 样式复用
- 避免重复编写已有样式, 公共样式存在于 [style](mdc:src/assets/style)
- 合理使用 mixin 和 function

## 2. 命名规范

### 2.1 类名命名
- 使用语义化的英文单词组合，保持简洁，避免过长
- 使用小写字母，单词间用连字符（-）连接，禁止使用 &- 语法，需写出完整的类名

### 2.2 命名示例
```scss
// 推荐
.user-profile
.card-container
.header-nav

// 不推荐
.userProfile
.card_container
.headerNav
```

## 3. 样式编写

### 3.1 选择器
- 避免过深的选择器嵌套（最多不超过3层）
- 合理使用选择器优先级
- 避免使用 ID 选择器，避免使用 !important

### 3.2 布局
- 优先使用 Flex 布局，合理使用 Grid 布局
- 避免使用浮动布局，响应式设计使用媒体查询

### 3.3 颜色规范
- 使用大写十六进制颜色值（如：#FFFFFF）
- 优先使用 CSS 变量定义颜色
- 避免使用颜色名称（如：red, blue）

### 3.4 单位使用
- 使用 rem 作为主要单位
- 特定场景可使用 px（如：边框）
- 避免使用 em（除非特殊需求）

## 4. 性能优化

### 4.1 代码组织
- 相关样式放在同一文件中
- 按功能模块组织样式文件
- 及时删除无用样式

### 4.2 资源优化
- 避免使用过小的背景图片平铺
- 合理使用雪碧图
- 图片资源使用 CDN

### 4.3 渲染优化
- 合理使用 transform 和 opacity
- 避免频繁触发重排
- 使用 will-change 提示浏览器

## 5. 全局样式

### 5.1 修改限制
- 禁止随意修改全局样式
- 修改前需全面评估影响
- 修改后需全面测试

### 5.2 z-index 管理
- 建立清晰的层级管理机制
- 避免 z-index 冲突
- 使用变量管理 z-index 值

## 6. 最佳实践

### 6.1 代码格式
- 使用 4 空格缩进，属性值后加分号
- 选择器与花括号间保留空格

### 6.2 注释规范
- 关键样式添加注释
- 复杂逻辑需详细说明
- 使用统一的注释格式