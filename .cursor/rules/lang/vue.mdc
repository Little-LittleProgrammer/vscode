---
description: 
globs: *.vue
alwaysApply: false
---
# Vue 开发规范

## 1. 项目架构

### 1.1 目录结构
- 组件文件组织
  - 公共组件：`components/`
  - 页面组件：`views/` 或 `pages/`
  - 路由配置：`router/`
  - API 请求：`api/`
  - 工具函数：`utils/`
  - 状态管理：`store/`

### 1.2 文件命名
- 组件文件：使用 PascalCase（如：`UserProfile.vue`）
- 工具文件：使用 kebab-case（如：`date-utils.js`）
- 样式文件：使用 kebab-case（如：`main-style.scss`）

## 2. Vue2 开发规范

### 2.1 组件结构
```js
export default {
  name: 'ComponentName',
  components: {},
  mixins: [],
  props: {},
  data() {},
  computed: {},
  watch: {},
  created() {},
  mounted() {},
  methods: {}
}
```

### 2.2 模板规范
- 单个组件的 template 不超过 300 行
- 复杂模板考虑拆分为子组件
- 使用 ref 而非 id 获取 DOM 元素（v-if 元素除外）
- 避免过深的组件嵌套（建议不超过 3 层）

### 2.3 样式规范
- 必须使用 `scoped` 属性
- 优先使用 class 选择器
- 避免使用 ID 选择器
- 遵循 BEM 命名规范

### 2.4 性能优化
- 合理使用 computed 和 watch
- 使用 computed 构建动态样式
- 大型组件进行模块拆分
- 避免不必要的组件重渲染

## 3. Vue3 开发规范

### 3.1 组件编写
- 使用 `<script setup>` 语法
- 使用 Composition API
- 响应式数据统一使用 ref
- 类型定义使用 TypeScript

### 3.2 组合式函数
- 命名以 `use` 开头
- 返回响应式数据
- 注意依赖收集
- 保持单一职责

### 3.3 代码示例
```vue
<script setup lang="ts">
import { ref, computed } from 'vue'
import type { PropType } from 'vue'

interface User {
  name: string
  age: number
}

const props = defineProps<{
  user: User
}>()

const emit = defineEmits<{
  (e: 'update', value: User): void
}>()

const userName = computed(() => props.user.name)
</script>
```

## 4. 最佳实践

### 4.1 导入规范
```js
// 导入顺序
import Vue from 'vue'                    // 1. Vue 相关
import Vuex from 'vuex'                  // 2. 第三方库
import { mapState } from 'vuex'          // 3. 第三方库的部分导入
import UserComponent from '@/components/User'  // 4. 项目组件
import { formatDate } from '@/utils'     // 5. 工具函数
import '@/styles/main.scss'              // 6. 样式文件
```

### 4.2 组件通信
- Props 向下传递数据
- Events 向上传递事件
- Vuex/Pinia 管理全局状态
- Provide/Inject 跨层级通信

### 4.3 性能优化
- 合理使用异步组件
- 使用 keep-alive 缓存组件
- 避免不必要的计算属性
- 使用 v-show 替代 v-if（频繁切换场景）

## 5. 代码质量

### 5.1 代码审查
- 遵循 ESLint 规则
- 使用 Prettier 格式化代码
- 编写单元测试
- 进行代码审查

### 5.2 文档规范
- 组件必须包含注释
- 复杂逻辑需要详细说明
- 维护 README 文档
- 记录重要的 API 变更

### 5.3 版本控制
- 遵循语义化版本
- 编写清晰的提交信息
- 保持分支策略一致
- 及时处理合并冲突