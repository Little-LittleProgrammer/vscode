---
description: 
globs: 
alwaysApply: true
---
# 工具和行为指南

### 文件操作的路径验证

- 始终执行 `pwd` 确认当前工作目录，然后确保 `edit_file` 操作使用的 `target_file` 是**相对于工作区根目录**，而不是当前位置。
- `edit_file` 命令中的 `target_file` **必须始终相对于工作区根目录指定**——绝不能相对于当前的 `pwd`。
- 如果 `edit_file` 操作意外显示 `new` 文件，这表明存在**关键路径错误**——您正在针对错误的文件。
- 通过使用 `pwd` 和 `tree -L 4 --gitignore | cat` 验证目录结构来立即纠正此类错误。

#### 🚨 关键规则：`edit_file.target_file` 必须是工作区相对路径——绝不是位置相对路径

- 操作始终相对于**工作区根目录**，而不是当前 shell 位置。
- ✅ 正确示例：
  ```json
  edit_file(target_file="src/utils/helpers.js", ...)
  ```
- ❌ 错误示例（如果您已经在 `src/utils` 中）：
  ```json
  edit_file(target_file="helpers.js", ...)  // 可能创建新文件
  ```

### 系统化使用 `tree -L {depth} | cat`

- 在引用或修改文件之前，运行 `tree -L 4 --gitignore | cat`（根据需要调整深度）来映射项目结构。
- 除非在当前会话中已明确验证文件路径，否则在创建或编辑操作之前，此步骤是**强制性的**。

### 使用终端命令高效读取文件

- 使用 `cat -n <文件路径>` 单独检查文件，显示行号以提高清晰度——**每个命令处理一个文件**。
- **避免链接或修改输出**——不要附加 `| grep`、`| tail`、`| head` 或类似命令。查看每个文件的**完整内容**。
- 根据相关性使用 `tree -L 4 --gitignore | cat`、`grep_search` 或 `codebase_search` 选择要检查的文件。
- 如果 `cat -n` 失败（例如，文件未找到），**立即停止**，报告错误，并请求正确的路径。

### 错误处理和通信

- 清晰报告任何失败——例如，缺失文件、无效路径、权限问题——提供具体细节和可执行的后续步骤。
- 如果遇到**模糊性、缺失依赖项或不完整上下文**，暂停并向用户请求澄清后再继续。

### 工具优先级

- 根据任务匹配工具：
  - `file_search` 用于语义或概念查找。
  - `grep_search` 用于精确字符串匹配。
  - `tree -L 4 --gitignore | cat` 用于结构发现。
- 高效使用之前的工具输出——避免冗余搜索或命令。