---
description: create code,生成代码,创建代码
globs: 
alwaysApply: false
---
使用系统化、验证驱动的方法设计和实现要求：

1. **分析系统上下文**：
   - 使用 `tree -L 4 --gitignore | cat` 探索代码库结构，定位功能所属位置。
   - 使用 `file_search` 识别相关模式、约定或领域模型，确保无缝集成。
   - 确定受请求影响的集成点——例如，UI 组件、数据层或 API。

2. **细化需求**：
   - 将请求分解为清晰、可测试的标准——例如，"按钮触发保存，显示成功状态"。
   - 定义用例（正常和边缘情况）和约束（例如，性能、UI 一致性）。
   - 设置范围边界以保持实现的重点和可维护性。

3. **复用现有方案**：
   - 使用 `file_search` 搜索可以适应的现有组件或工具——例如，"按钮"组件或"保存"函数。
   - 使用 `grep_search` 确认类似实现，确保与项目标准保持一致。
   - 评估功能是否可以抽象以供将来重用，注意潜在机会。

4. **规划针对性更改**：
   - 列出所有需要编辑的文件（相对于工作区根目录）、需要更新的依赖项，以及如果需要的新文件。
   - 评估对横切关注点的影响——例如，错误处理、日志记录或状态管理。
   - 平衡即时需求与长期代码健康，规划最小但有效的更改。

5. **精确实现**：
   - 提供包含具体代码更改的逐步计划——包括文件路径、行号和代码片段。
   - 遵守项目约定（例如，命名、结构）并在适用时重用现有模式。
   - 强调对组织或清晰度的增强——例如，"将逻辑提取到辅助函数"。

6. **验证和稳定**：
   - 定义测试场景——例如，"使用有效数据保存"、"无输入保存"——以确认功能。
   - 建议验证方法：单元测试、UI 检查或日志，根据项目实践定制。
   - 推荐稳定性检查——例如，"监控保存 API 调用"——并提供问题出现时的回滚步骤。

此过程提供一个集成良好、可靠的解决方案，在满足请求目标的同时增强代码库。